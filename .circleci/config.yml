version: 2.1

# If you only want circle to run on direct commits to master, you can uncomment this out
# and uncomment the filters: *filter-only-master down below too
#
aliases:
 - &filter-only-master
   branches:
     only:
       - master
 - &filter-not-gh-pages-not-master
   branches:
     ignore:
       - gh-pages
       - master

orbs:
  win: circleci/windows@2.2.0

commands:
  # Setup. Includes boost.
  base-build-setup:
    steps:
      - run:
          name: Setup
          command: |
            sudo ./setup_oss_toolchain.sh

  # For testing, need additional dependencies not provided by the image.
  test-build-setup:
    steps:
      - run:
          name: Setup for tests
          command: |
            sudo apt-get install -y --no-install-recommends dalvik-exchange default-jdk-headless
            sudo ln -s /usr/bin/dalvik-exchange /usr/local/bin/dx

  # Special version of the above to work around Debian Testing package issues.
  #
  # Note: CircleCI does not allow to drop existing caches (in case they are
  #       outdated, for example). The expectation is that the "cache key"
  #       changes, for example via the checksum of a dependency file.
  #
  #       This does not apply to our setup. So we use an environment variable
  #       defined in the project settings. If a cache needs to be invalidated,
  #       update the variable value.
  #
  #       However, at the same time the project settings values cannot be used
  #       directly. So use a file as an intermediate.
  #
  #       See:
  #       * [https://support.circleci.com/hc/en-us/articles/115015426888-Clear-project-dependency-cache]
  #       * [https://devops.stackexchange.com/questions/9147/how-to-get-other-than-no-value-when-interpolating-environment-some-var]
  test-build-setup-sdk:
    steps:
      - run:
          name: Setup for tests (Deb Testing)
          command: |
            sudo apt-get install -y --no-install-recommends default-jdk-headless

      - run:
          name: Create cache key file
          command: |
            echo "Cache key is: ${CACHE_VERSION}"
            echo "${CACHE_VERSION}" > cache_version.rev

      - restore_cache:
          keys:
            - android-build-tools-{{ checksum "cache_version.rev" }}

      # We have to emulate cache behavior. Skip downloads if files exist.
      - run:
          name: Check/Install (SDK)
          command: |
            if [ -e ~/sdk/build-tools/25.0.3/dx ] ; then
              echo "Found SDK."
              exit 0
            fi
            echo "SDK missing, downloading..."
            rm -rf ~/sdk 2>/dev/null
            wget https://dl.google.com/android/repository/commandlinetools-linux-6609375_latest.zip
            mkdir -p ~/sdk/cmdline-tools
            unzip commandlinetools-linux-6609375_latest.zip -d ~/sdk/cmdline-tools/
            pushd ~/sdk/cmdline-tools/tools/bin >/dev/null
            echo 'y' | ./sdkmanager --install 'build-tools;25.0.3'
            popd >/dev/null

      - run:
          name: Check/Install (Symlink)
          command: |
            if [ -L /usr/local/bin/dx ] ; then
              echo "Found symlink."
              exit 0
            fi
            echo "Adding symlink..."
            sudo ln -s ~/sdk/build-tools/25.0.3/dx /usr/local/bin/dx

      - save_cache:
          paths:
            - ~/sdk
          key: android-build-tools-{{ checksum "cache_version.rev" }}

  install-clang:
    steps:
      - run:
          name: Install Clang (Deb Testing)
          command: |
            sudo apt-get install -y --no-install-recommends clang

  configure-and-build-w-make:
    parameters:
      configure_extra:
        default: ""
        type: string
    steps:
      # Configure.
      - run:
          name: Configure
          command: |
            autoreconf -ivf
            ./configure << parameters.configure_extra >>

      # Actual build.
      - run:
          name: Build
          # The old Travis limit. Hopefully ensures GCC does
          # not die.
          command: |
            make -j4

  # Build & run tests.
  test-w-make:
    description: "Test ReDex with make"
    steps:
      - run:
          name: Build tests
          command: |
            make -j4 check TESTS=
      - run:
          name: Run tests
          command: |
            mkdir -p /tmp/test-results
            export GTEST_OUTPUT=xml:/tmp/test-results/
            make -j4 check
      - store_test_results:
          path: /tmp/test-results

  setup-build-and-test-w-make:
    description: "Prepare, build and test ReDex"
    parameters:
      configure_extra:
        default: ""
        type: string
    steps:
      - base-build-setup
      - test-build-setup

      - configure-and-build-w-make:
          configure_extra: << parameters.configure_extra >>

      - test-w-make

  setup-build-and-test-w-make-sdk:
    description: "Prepare, build and test ReDex"
    parameters:
      configure_extra:
        default: ""
        type: string
    steps:
      - base-build-setup
      - test-build-setup-sdk

      - configure-and-build-w-make:
          configure_extra: << parameters.configure_extra >>

      - test-w-make

  setup-build-and-test-windows:
    description: "Prepare, build and test ReDex on Windows with MSYS2"
    steps:
      - run:
          name: Install MSYS2
          shell: bash.exe
          command: choco install msys2 -y
      - run:
          name: Update MSYS2 package DB
          shell: c:/tools/msys64/msys2_shell.cmd -defterm -no-start -msys2 -full-path -here -c
          command: pacman -Syuu --noconfirm
      - run:
          name: Setup
          shell: c:/tools/msys64/msys2_shell.cmd -defterm -no-start -msys2 -full-path -here -c
          command: pacman -S --needed --noconfirm make mingw-w64-x86_64-boost mingw-w64-x86_64-cmake mingw-w64-x86_64-gcc mingw-w64-x86_64-jsoncpp mingw-w64-x86_64-make zip unzip mingw-w64-x86_64-python

      - run:
          name: Build
          shell: c:/tools/msys64/msys2_shell.cmd -defterm -no-start -mingw64 -full-path -here -c
          command: mkdir build && cd build && cmake -G "MSYS Makefiles" .. && make -j 4

      - run:
          name: Minimal Test
          # Using bash because somehow piping does not seem to work correctly with cmd.
          shell: bash.exe
          command: 'build/redex-all --show-passes | grep -E "Registered passes: [1-9][0-9]*"'

      - run:
          name: Package
          shell: c:/tools/msys64/msys2_shell.cmd -defterm -no-start -mingw64 -full-path -here -c
          command: cd build && make -j 4 package

jobs:
  build-16_04:
    docker:
      - image: circleci/buildpack-deps:xenial
    # GCC is hungry.
    resource_class: large
    # Tell everyone we're using GCC 5.
    environment:
      CXX: g++-5
    steps:
      - checkout
      - setup-build-and-test-w-make:
          configure_extra: "CXX='g++-5'"

  build-20_04:
    docker:
      - image: circleci/buildpack-deps:focal
    # GCC is hungry.
    resource_class: large
    steps:
      - checkout
      - setup-build-and-test-w-make

  build-deb_stable:
    docker:
      - image: circleci/buildpack-deps:stable
    # GCC is hungry.
    resource_class: large
    steps:
      - checkout
      - setup-build-and-test-w-make

  build-deb_testing:
    docker:
      - image: circleci/buildpack-deps:testing
    # GCC is hungry.
    resource_class: large
    steps:
      - checkout
      - setup-build-and-test-w-make-sdk

  build-deb_testing-w-clang:
    docker:
      - image: circleci/buildpack-deps:testing
    resource_class: large
    environment:
      CC: clang
      CXX: clang++
    steps:
      - checkout
      - install-clang
      - setup-build-and-test-w-make-sdk

  build-windows:
    executor:
      name: win/default
      # GCC is hungry.
      size: "large"

    steps:
      - checkout
      - setup-build-and-test-windows

  build-windows-artifacts:
    executor:
      name: win/default
      # GCC is hungry.
      size: "large"

    steps:
      - checkout
      - setup-build-and-test-windows

      # Artifacts syntax does not allow wildcards. Copy result (without knowing details)
      # into a temp dir instead.
      - run:
          name: Copy package for CircleCI
          shell: c:/tools/msys64/msys2_shell.cmd -defterm -no-start -mingw64 -full-path -here -c
          command: mkdir artifacts && mv build/Redex*.zip artifacts/

      - store_artifacts:
          path: .\artifacts

  deploy-website:
    docker:
      # specify the version you desire here
      - image: circleci/node:8.11.1

    steps:
      - checkout
      - run:
          name: Deploying to GitHub Pages
          command: |
            git config --global user.email "docusaurus-bot@users.noreply.github.com"
            git config --global user.name "Website Deployment Script"
            echo "machine github.com login docusaurus-bot password $DOCUSAURUS_GITHUB_TOKEN" > ~/.netrc
            echo "Deploying website..."
            unset CI_PULL_REQUEST CIRCLE_PULL_REQUEST
            cd website && yarn install && GIT_USER=docusaurus-bot USE_SSH=false yarn run publish-gh-pages

# TODO: branch filtering is deprecated, but workflow filtering documentation
#       for 2.1 does not exist and 2.0 requires a schedule.

workflows:
  version: 2.1
  build_master:
    jobs:
      - build-16_04:
          filters: *filter-only-master
      - build-windows:
          filters: *filter-only-master

      - deploy-website:
          filters: *filter-only-master

  build_other:
    jobs:
      # Note: only filter gh-pages for 'build_other' so that pull
      #       requests/stable get checked.
      - build-16_04:
          filters: *filter-not-gh-pages-not-master
      - build-20_04:
          filters: *filter-not-gh-pages-not-master
      - build-deb_stable:
          filters: *filter-not-gh-pages-not-master
      - build-deb_testing:
          filters: *filter-not-gh-pages-not-master
      - build-deb_testing-w-clang:
          filters: *filter-not-gh-pages-not-master
      - build-windows:
          filters: *filter-not-gh-pages-not-master

  nightly:
    triggers:
      - schedule:
          cron: "0 0 * * *"
          filters: *filter-only-master
    jobs:
      - build-20_04
      - build-deb_stable
      - build-deb_testing
      - build-deb_testing-w-clang
      - build-windows-artifacts
